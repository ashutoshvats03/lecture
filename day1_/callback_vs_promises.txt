Callbacks
A callback is a function passed as an argument to another function and is executed after some operation has been completed.

Usage: Often used in older asynchronous APIs and event handling.

function doSomething(callback) {
    // Perform some asynchronous operation
    setTimeout(() => {
        // Operation complete, execute the callback
        callback('Result');
    }, 1000);
}

doSomething((result) => {
    console.log(result); // Logs 'Result' after 1 second
});
Drawbacks:
Callback Hell: Nested callbacks can become difficult to read and maintain.
Error Handling: Managing errors can be cumbersome.

Promises
A promise is an object representing the eventual completion (or failure) of an asynchronous operation and its resulting value.

Usage: Preferred in modern asynchronous APIs and provides a more structured approach to handling async operations.

function doSomething() {
    return new Promise((resolve, reject) => {
        // Perform some asynchronous operation
        setTimeout(() => {
            // Operation complete, resolve the promise
            resolve('Result');
        }, 1000);
    });
}

doSomething()
    .then((result) => {
        console.log(result); // Logs 'Result' after 1 second
    })
    .catch((error) => {
        console.error(error);
    });
Advantages:
Chaining: Promises can be chained, making the code more readable and easier to follow.
Error Handling: Errors are caught and handled in a consistent manner using .catch().



In modern JavaScript, promises (along with async/await) are generally preferred over callbacks for handling asynchronous operations.





